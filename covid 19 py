import pandas as pd
import matplotlib.pyplot as plt

#importing csv files
confirmed = pd.read_csv('covid_confirmed.csv')
deaths = pd.read_csv('covid_deaths.csv')
recovered = pd.read_csv('covid_recovered.csv')

#dropping different columns in the data
confirmed = confirmed.drop(['Province/State', 'Lat', 'Long'], axis=1)
deaths = deaths.drop(['Province/State', 'Lat', 'Long'], axis=1)
recovered = recovered.drop(['Province/State', 'Lat', 'Long'], axis=1)


#aggregate the values;group by countries
confirmed = confirmed.groupby(confirmed['Country/Region']).aggregate('sum')
deaths = deaths.groupby(deaths['Country/Region']).aggregate('sum')
recovered = recovered.groupby(recovered['Country/Region']).aggregate('sum')

#transposing the data so that the dates are vertical and countries horizontal
confirmed = confirmed.T
deaths = deaths.T
recovered = recovered.T

#calculating the growth rate.we need to use the copy data frame so that we do not change the confirmed cases array;calculate the no of new cases after each day from the day before
new_cases = confirmed.copy()

for day in range(1,len(confirmed)):
    new_cases.iloc[day] = confirmed.iloc[day] - confirmed.iloc[day-1]

print(new_cases.tail(10))

#calculating the growth rate
growth_rate = confirmed.copy()

for day in range(1,len(confirmed)):
    growth_rate.iloc[day] = (new_cases.iloc[day]/confirmed.iloc[day])*100
print(growth_rate.tail(10))

active_cases = confirmed.copy()
#we start from zero coz we are not looking at past data
for day in range(0, len(confirmed)):
    active_cases.iloc[day] = confirmed.iloc[day] - recovered.iloc[day] - deaths.iloc[day]

overall_growth_rate = confirmed.copy()
for day in range(1, len(confirmed)):
    overall_growth_rate.iloc[day] = (((active_cases.iloc[day] - active_cases.iloc[day - 1])/active_cases.iloc[day-1])*100)
#print(overall_growth_rate['Kenya'].tail(10))
#negative growth rate means people are recovering faster than getting sick

death_rate = confirmed.copy()
for day in range(0, len(confirmed)):
    death_rate.iloc[day] = (deaths.iloc[day]/confirmed.iloc[day])*100
#print(death_rate['Kenya'].tail(10))

#.05% is just an estimate
hosp_rate_est = 0.05

hosp_needed = confirmed.copy()
for day in range(0, len(confirmed)):
    hosp_needed.iloc[day] = active_cases.iloc[day] * hosp_rate_est
#print(hosp_needed['Kenya'].tail(10))

#visualization of data

countries = ['Italy','Austria','China','Kenya','Spain','France']

ax = plt.subplot()
ax.set_facecolor('black')
ax.figure.set_facecolor('#121212')
ax.tick_params(axis = 'x', colors = 'white')
ax.tick_params(axis = 'y', colors = 'white')
ax.set_title('COVID-19-Total Confirmed Cases- By Country', color = 'white')

for country in countries:
    confirmed[country].plot(label = country)       #placing a legend(key) on a plot
#plt.legend(loc = 'upper left')
#plt.show()

simulated_growth_rate = 0.10   #per day

dates = pd.date_range(start='5/4/2020', periods=40, freq='D')
dates = pd.Series(dates)
dates = dates.dt.strftime('%m/%d/%Y')

simulated_growth_rate = confirmed.copy()
simulated_growth_rate = simulated_growth_rate.append(pd.DataFrame(dates, index=dates))
print(simulated_growth_rate)

for day in range(len(confirmed), len(confirmed)+40):
    simulated_growth_rate.iloc[day] = simulated_growth_rate.iloc[day - 1]*(1+simulated_growth_rate.iloc[day])

ax = plt.subplot()
ax.set_facecolor('black')
ax.figure.set_facecolor('#121212')
ax.tick_params(axis = 'x', colors = 'white')
ax.tick_params(axis = 'y', colors = 'white')
ax.set_title('Future Simulation for Kenya', color = 'white')
simulated_growth_rate['Kenya'].plot()
plt.show()




